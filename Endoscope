#include <iostream>
#include <vector>
#include <set>
#include <map>
#define ll long long 
#include <algorithm>
#include <string.h>
#include <queue>

using namespace std;


set<int>rt = {1,3,4,5};
set<int>lt = {1,3,6,7};
set<int>up = {1,2,4,7};
set<int>down = {1,2,5,6};

ll dx[]={+1,-1,0,0};
ll dy[]={0,0,+1,-1};


ll a[1005][1005];
ll visit[1005][1005];
ll level[1005][1005]={0};
ll n,m,x,y,len;
bool is_valid(ll nx,ll ny)
{
	if(nx>=1 && nx<=n && ny>=1 && ny<=m && visit[nx][ny]==false && a[nx][ny]!=0)
	return true;
return false;

}
bool check(ll srcx ,ll srcy, ll desx ,ll desy , ll dr,ll dc)
{
	if(rt.count(a[srcx][srcy]) && lt.count(a[desx][desy]) && dr==0 && dc==+1)
		return true;
	if(lt.count(a[srcx][srcy]) && rt.count(a[desx][desy]) && dr==0 && dc==-1)
		return true;
	if(up.count(a[srcx][srcy]) && down.count(a[desx][desy]) && dr==-1 && dc==0)
		return true;
    if(down.count(a[srcx][srcy]) && up.count(a[desx][desy]) && dr==+1 && dc==0)
		return true;
		
		return false;


}



ll bfs(ll r,ll c)
{
	queue<pair<ll,ll>> q;

	q.push({r,c});
	

	visit[r][c]=true;
	
	level[r][c]=1;
	ll ans=0;

	if(a[r][c]==0)return ans;
	 ans=1;
	
   while(!q.empty())
   {

   	ll src_x=q.front().first;
   	ll src_y=q.front().second;

   	q.pop();
   	for(int i=0;i<4;i++)
   	{
   		ll new_x=src_x+dx[i];
   		ll new_y=src_y+dy[i];
   		if(is_valid(new_x,new_y) && check(src_x,src_y,new_x,new_y,dx[i],dy[i]))
   		{
   			level[new_x][new_y]=level[src_x][src_y]+1;
   			if(level[new_x][new_y]<=len)ans++;
   			q.push({new_x,new_y});
   			visit[new_x][new_y]=true;

   		}
   	}
 }
 return ans;


   


}


void solve()
{
	memset(a,0,sizeof(a));
	memset(level,0,sizeof(a));
	memset(visit,0,sizeof(visit));

	
	cin>>n>>m>>x>>y>>len;

	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
		{
			cin>>a[i][j];
		}
	}
	

	ll val=bfs(x+1,y+1);

	cout<<val<<endl;



}


int main()

{

	  #ifndef ONLINE_JUDGE
freopen ("input.txt","r", stdin);
freopen ("out.txt","w", stdout);

#endif
int t;
cin>>t;
while(t--)
solve();


}
