#include <iostream>
#include <vector>
#include <set>
#include <map>
#define ll long long 
#include <algorithm>
#include <string.h>
#include <queue>

using namespace std;


set<int>rt = {1,3,4,5};
set<int>lt = {1,3,6,7};
set<int>up = {1,2,4,7};
set<int>down = {1,2,5,6};


ll a[1000][1000];
ll visit[1000][1000];
ll level[1000][1000]={0};
ll n,m,x,y,len;
bool is_valid(ll nx,ll ny)
{
    if(nx>=1 && nx<=n && ny>=1 && ny<=m && visit[nx][ny]==false && a[nx][ny]!=0)
    return true;
return false;

}



ll bfs(ll r,ll c)
{
    queue<pair<ll,ll>> q;

    q.push({r,c});
    

    visit[r][c]=true;
    
    level[r][c]=1;
    ll ans=1;
    if(a[r][c]==0)return ans;
    
   while(!q.empty())
   {

       ll src_x=q.front().first;
       ll src_y=q.front().second;
  
     q.pop();

       if(is_valid(src_x+1,src_y) && down.count(a[src_x][src_y])==1 &&
        up.count(a[src_x+1][src_y])==1 )
       {
           visit[src_x+1][src_y]=true;
           level[src_x+1][src_y]=level[src_x][src_y]+1;
           if(level[src_x+1][src_y]<=len)ans++;
           q.push({src_x+1,src_y});
       }
    if(is_valid(src_x-1,src_y) && up.count(a[src_x][src_y])==1 && 
    down.count(a[src_x-1][src_y])==1  )
       {
         visit[src_x-1][src_y]=true;
        level[src_x-1][src_y]=level[src_x][src_y]+1;
        if(level[src_x-1][src_y]<=len)ans++;
           q.push({src_x-1,src_y});
       }
       if(is_valid(src_x,src_y+1) && rt.count(a[src_x][src_y]) && 
       lt.count(a[src_x][src_y+1]) )
       { 
       
           visit[src_x][src_y+1]=true;
           level[src_x][src_y+1]=level[src_x][src_y]+1;
           if(level[src_x][src_y+1]<=len)ans++;

           q.push({src_x,src_y+1});
       }

       if(is_valid(src_x,src_y-1) && lt.count(a[src_x][src_y]) && 
       rt.count(a[src_x][src_y-1]) )
       {
           visit[src_x][src_y-1]=true;
           level[src_x][src_y-1]=level[src_x][src_y]+1;
           if(level[src_x][src_y-1]<=len)ans++;

           q.push({src_x,src_y-1});
       }

   }
 


   return ans;



}


void solve()
{
    memset(a,0,sizeof(a));
    memset(level,0,sizeof(a));
    memset(visit,0,sizeof(visit));

    
    cin>>n>>m>>x>>y>>len;

    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            cin>>a[i][j];
        }
    }
    

    ll val=bfs(x+1,y+1);

    cout<<val<<endl;



}


int main()

{

   
int t;
cin>>t;
while(t--)
solve();


}
